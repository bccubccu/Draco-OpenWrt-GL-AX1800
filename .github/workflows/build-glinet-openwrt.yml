name: build glinet openwrt

on:
  repository_dispatch:
  workflow_dispatch:

  push:
    paths:
      - '.github/workflows/*.yml'
      - 'custom.yml'
      - 'build.sh'
    branches:
      - master

  schedule:
    - cron: 0 16 * * *

env:
  UPLOAD_FIRMWARE: true
  UPLOAD_WETRANSFER: true
  UPLOAD_RELEASE: true

jobs:
  build:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        # 设备
        device: [target_wlan_ap-gl-ax1800, target_wlan_ap-gl-axt1800]
        ui: [false]

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      run: |
        sudo apt update
        sudo apt install python build-essential libncurses5-dev gawk git libssl-dev gettext zlib1g-dev swig unzip time rsync python3 python3-setuptools python3-yaml subversion -y
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@github.com"
        chmod 777 ./build.sh

    - name: make
      run: |
        ./build.sh ~ ${{ matrix.device }} ${{ matrix.ui }}

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled() && !failure()
      run: |
        cd ~/firmware
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        cd ~/packages
        echo "PACKAGES=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled() && !failure()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload packages directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled() && !failure()
      with:
        name: OpenWrt_packages${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.PACKAGES }}

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled() && !failure()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

     - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && !failure()
      run: |
        echo "::set-output name=release_tag::AXT1800-$(date +"%Y.%m.%d-%H.%M")"
        touch release.txt
        echo "## ??? 固件下载 | GLINET AXT1800" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "- ?? [点我快速下载](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "${releaseReadme}" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "- ?? 后台地址：192.168.8.1" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "- ?? WiFi名称：GL-AXT1800-2.4GHz和GL-AXT1800-5GHz" >> release.txt
        echo -e "## ? 主要功能\n1. 网络带宽监视器\n2. 实时流量监测\n3. 磁盘管理工具\n4. 断网检测功能与定时重启\n5. 释放内存\n6. 基于IP地址限速\n7. 访问时间控制\n8. IP/MAC绑定\n9. 通用即插即用UPnP（端口自动转发）\n10. 添加防火墙\n11. 动态域名（DDNS）\n12. WOL网络唤醒\n13. 支持计划重启\n14. 文件管理助手\n15. Argon主题\n16. Argon主题设置\n17. Clash代理\n18. ZeroTier内网穿透\n19. AdGuard home广告过滤\n20. 全能推送（钉钉推送，企业微信推送，Bark，PushPlus推送）\n21. Turbo ACC 网络加速(支持Fast Path或者硬件NAT)\n22. SSH_SFTP链接\n23. Compat依赖\n24. Uhttpd\n25. Vsftpd\n26. 微信/Telegram推送\n27. KMS服务器\n28. 应用商店\n29. CPU 性能优化调节\n30. Ftp服务器\n31. Aria2下载器\n32. ariang" >> release.txt
        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled() && !failure()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 1

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.2.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && !failure()
      with:
        keep_latest: 4
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
